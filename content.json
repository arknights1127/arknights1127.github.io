{"meta":{"title":"否定之否定的博客","subtitle":null,"description":null,"author":"John Doe","url":"http://yoursite.com","root":"/"},"pages":[{"title":"分类","date":"2019-07-05T01:48:17.000Z","updated":"2019-07-05T03:24:01.397Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"数据库系统概论","slug":"数据库系统概论","date":"2019-09-23T07:51:35.000Z","updated":"2019-09-23T11:44:02.894Z","comments":true,"path":"2019/09/23/数据库系统概论/","link":"","permalink":"http://yoursite.com/2019/09/23/数据库系统概论/","excerpt":"数据库系统的结构 模式：数据库中全体数据的逻辑结构和特征的描述,只涉及’型’，不涉及具体’值’ 模式反映数据的结构和联系，实例反映数据库某一时刻的状态。 三级模式结构 模式(schema)：即逻辑模式，是数据库全体数据的逻辑结构和特征的描述，如数据记录由哪些数据项构成，数据项的名字，类型，取值范围，数据的联系，数据的安全性完整性要求。(一个) 外模式(external schema)：也称子模式，是数据库用户能够看见和使用的局部数据的逻辑结构和特征的描述。每个用户只能看见和访问所对应的的外模式中的数据(多个) 内模式(internal schema)：也称存储模式，数据物理结构和存储","text":"数据库系统的结构 模式：数据库中全体数据的逻辑结构和特征的描述,只涉及’型’，不涉及具体’值’模式反映数据的结构和联系，实例反映数据库某一时刻的状态。 三级模式结构&emsp;&emsp;模式(schema)：即逻辑模式，是数据库全体数据的逻辑结构和特征的描述，如数据记录由哪些数据项构成，数据项的名字，类型，取值范围，数据的联系，数据的安全性完整性要求。(一个)&emsp;&emsp;外模式(external schema)：也称子模式，是数据库用户能够看见和使用的局部数据的逻辑结构和特征的描述。每个用户只能看见和访问所对应的的外模式中的数据(多个)&emsp;&emsp;内模式(internal schema)：也称存储模式，数据物理结构和存储方式的描述，例如索引方式是B+树还是hash索引。(一个) 数据库的数据具有较高的逻辑独立性和物理独立性：&emsp;&emsp;模式改变时，通过改变“外模式/模式映像”使外模式不必改变,内模式改变时,通过改变“模式/内模式映像”使得模式和外模式不变。 关系数据库——关系代数关系代数运算符： 传统集合运算并(union)$R \\bigcup S=\\{t|t \\in R \\bigvee t \\in S\\}$ 差(except)$R-S=\\{t|t \\in R \\bigwedge t \\notin S\\}$ 交(intersection)$R \\bigcap S=\\{t|t \\in R \\bigwedge t \\in S\\}$ 笛卡尔积$$ 专门的关系运算$\\spadesuit$除运算(division) 关系数据库标准语言SQL数据定义 基本表123456789101112131415161718192021222324252627CREATE TABLE&lt;表名&gt;(&lt;列名&gt;&lt;数据类型&gt;[列的完整性约束] [,&lt;列名&gt;&lt;数据类型&gt;[列的完整性约束]] ... [,&lt;列名&gt;&lt;数据类型&gt;[列的完整性约束]]);``` **列的完整性约束条件**: PRIMARY KEY 主码 UNIQUE 取唯一值 NOT NULL 不能取空值 **修改基本表**： **删除基本表**： #### 数据查询，查询优化**关系代数表达式的优化算法**:（１）分解选择运算 （２）移到叶端 （３）分解投影并移到叶端 （４）合并投影和选择 （５）合并选择和笛卡尔积为连接运 算 （６）生成优化后的关系代数表达式。 *****### T-SQL语言语法基础**变量**：```@local_variable```&lt;font color=red&gt;变量名以@开头&lt;/font&gt;如，声明一个变量：```DECLARE @creditID char(18)``` 声明多个变量以“,”分割。 **赋值**：使用set或select SET @a = 1SELECT @b = 2[,…]```条件语句:分支语句：循环语句：游标：","categories":[],"tags":[],"author":"John Doe"},{"title":"六级单词短语","slug":"六级单词短语","date":"2019-08-12T04:43:49.000Z","updated":"2019-08-16T02:51:52.779Z","comments":true,"path":"2019/08/12/六级单词短语/","link":"","permalink":"http://yoursite.com/2019/08/12/六级单词短语/","excerpt":"单词 organizer组织者 officer主任 consultant顾问 methodology方法论 quantitative定量 interviewer面试官 questionnaire调查问卷 intensive深入 examine检查 promote推广 satisfaction满意度 trend趋势 bureaucracy官僚主义 undergone经历 inflexible呆板的 superior优越 efficiency效率 essential至关重要的 role角色 crisis危机 wage工资 indication迹象 impact影响 rival对手 cooperat","text":"单词&emsp;organizer&emsp;&emsp;&emsp;组织者&emsp;officer&emsp;&emsp;&emsp;&emsp;&ensp;主任&emsp;consultant&emsp;&emsp;&ensp;顾问&emsp;methodology&emsp;&ensp;方法论&emsp;quantitative&emsp;&emsp;定量&emsp;interviewer&emsp;&emsp;面试官&emsp;questionnaire&ensp;调查问卷&emsp;intensive&emsp;&emsp;&emsp;&ensp;深入&emsp;examine&emsp;&emsp;&emsp;&ensp;检查&emsp;promote&emsp;&emsp;&emsp;&ensp;推广&emsp;satisfaction&emsp;&emsp;满意度&emsp;trend&emsp;&emsp;&emsp;&emsp;&emsp;趋势&emsp;bureaucracy&emsp;&ensp;官僚主义&emsp;undergone&emsp;&emsp;&ensp;经历&emsp;inflexible&emsp;&emsp;&emsp;呆板的&emsp;superior&emsp;&emsp;&emsp;&ensp;优越&emsp;efficiency&emsp;&emsp;&emsp;效率&emsp;essential&emsp;&emsp;&emsp;至关重要的&emsp;role&emsp;&emsp;&emsp;&emsp;&emsp;&ensp;角色&emsp;crisis&emsp;&emsp;&emsp;&emsp;&emsp;危机&emsp;wage&emsp;&emsp;&emsp;&emsp;&emsp;工资&emsp;indication&emsp;&emsp;&ensp;迹象&emsp;impact&emsp;&emsp;&emsp;&emsp;影响&emsp;rival&emsp;&emsp;&emsp;&emsp;&emsp;&ensp;对手&emsp;cooperate&emsp;&emsp;&ensp;合作&emsp;layoff&emsp;&emsp;&emsp;&emsp;&emsp;裁员&emsp;supplement&emsp;&emsp;补品&emsp;enhance&emsp;&emsp;&emsp;&ensp;提高&emsp;promise&emsp;&emsp;&emsp;&ensp;承诺&emsp;questionnaire&ensp;调查问卷&emsp;questionnaire&ensp;调查问卷&emsp;questionnaire&ensp;调查问卷&emsp;questionnaire&ensp;调查问卷 词组&emsp;spending habbits&emsp;&emsp;消费习惯&emsp;charts and tables&emsp;&emsp;图表和表格&emsp;feel inclined&emsp;&emsp;&emsp;&emsp;&ensp;倾向&emsp;business operation&emsp;运营&emsp;pull through&emsp;&emsp;&emsp;&emsp;&ensp;穿过&emsp;join hands&emsp;&emsp;&emsp;&emsp;&emsp;&ensp;携手&emsp;满意度&emsp;满意度&emsp;满意度&emsp;满意度","categories":[],"tags":[],"author":"John Doe"},{"title":"Hello World","slug":"hello-world","date":"2019-08-10T05:45:09.000Z","updated":"2019-08-10T05:45:09.722Z","comments":true,"path":"2019/08/10/hello-world/","link":"","permalink":"http://yoursite.com/2019/08/10/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1 $ hexo new \"My New Post\" More info: Writing Run server 1 $ hexo s","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"算法导论","slug":"算法导论","permalink":"http://yoursite.com/categories/算法导论/"}],"tags":[]},{"title":"逻辑斯谛回归与最大熵模型","slug":"逻辑斯谛回归与最大熵模型","date":"2019-08-10T04:24:11.000Z","updated":"2019-08-10T05:48:47.345Z","comments":true,"path":"2019/08/10/逻辑斯谛回归与最大熵模型/","link":"","permalink":"http://yoursite.com/2019/08/10/逻辑斯谛回归与最大熵模型/","excerpt":"","text":"","categories":[{"name":"人工智能","slug":"人工智能","permalink":"http://yoursite.com/categories/人工智能/"}],"tags":[],"author":"John Doe"},{"title":"决策树","slug":"决策树","date":"2019-08-10T02:02:09.000Z","updated":"2019-08-19T02:59:50.430Z","comments":true,"path":"2019/08/10/决策树/","link":"","permalink":"http://yoursite.com/2019/08/10/决策树/","excerpt":"定义(决策树) 分类决策树是一种描述对实例进行分类的树形结构。决策树由结点node，有向边direct edge组成。结点有两种类型，内部结点(表示一个特征和属性)，叶结点(表示一个类)。 决策树与if-then规则 将决策树转化为if-then规则集合：由决策树的根结点到叶结点的每一条路径构建一条规则：路径的内部结点的特征对应规则的条件，叶结点的类对应规则的结论。 必须满足互斥且完备的条件：每一个实例都被且仅被一条路径(规则)所覆盖。 决策树与条件概率分布 决策树可以表示给定特征条件下类的条件概率分布，这一条件概率分布定义在特征空间的一个划分上。决策树的一条路径对应划分中的一","text":"定义(决策树)&emsp;&emsp;分类决策树是一种描述对实例进行分类的树形结构。决策树由结点node，有向边direct edge组成。结点有两种类型，内部结点(表示一个特征和属性)，叶结点(表示一个类)。 决策树与if-then规则&emsp;&emsp;将决策树转化为if-then规则集合：由决策树的根结点到叶结点的每一条路径构建一条规则：路径的内部结点的特征对应规则的条件，叶结点的类对应规则的结论。必须满足互斥且完备的条件：每一个实例都被且仅被一条路径(规则)所覆盖。 决策树与条件概率分布&emsp;&emsp;决策树可以表示给定特征条件下类的条件概率分布，这一条件概率分布定义在特征空间的一个划分上。决策树的一条路径对应划分中的一个单元。决策树所表示的条件概率分布由各个单元给定条件下类的条件概率分布组成。 如图，假设只有两个类(正类和负类)，图(b)为各个单元给定条件下的条件概率分布，其中当某个单元c的条件概率分布满足P(Y=+1|X=c) &gt; 0.5时，就认为该单元属于正类（各个单元的条件概率分布都不相同），如$a_1 \\leq x^{(1)} \\leq 1,0 \\leq x^{(2)} \\leq a_3$时，条件概率小于0.5，所以属于负类。 决策树学习算法包括特征选择，决策树的生成，决策树的剪枝过程。 特征选择1.通常特征选择的准则是信息增益或信息增益比。2.特征选择是决定用哪个特征来划分特征空间。 信息增益(信息论与编码相关)&emsp;&emsp;熵是表示随机变量不确定性的度量。设x是一个取有限个值的离散随机变量，其概率分布为 P(X=x_i) = p_i, i = 1,2,...n则随机变量X的熵定义为 H(X) = -\\sum^n_{i=1}{p_ilogp_i}上式中的对数以2为底单位是比特(bit)，以e为底单位是纳特(nat)由定义可知，熵只依赖于X的分布，而与X的取值无关，所以也可将X的熵记为H(p) H(p) = -\\sum^n_{i=1}p_ilogp_i熵越大，随机变量的不确定性就越大，当所有取值可能性相等都为$\\frac{1}{n}$时，随机变量不确定性最大，熵最大。 0 \\leq H(p) \\leq logn&emsp;&emsp;证明 当$p_i = \\frac{1}{n}$时,$H = -\\sum^n_{i=1}p_ilogp_i = logn$为最大值。 首先证明一个结论：两个随机变量x,y满足x+y=p,$0 \\lt p \\leq 1$为一个定值，当x越靠近$\\frac{p}{2}$时，下面的z越大 $$ z = -(xlogx + (p-x)log(p-x)) $$ 对x求导 $$ \\begin{split} z &= -(logx + 1 - log(p-x) - 1)\\\\ &= -log{\\frac{x}{p-x}} \\end{split} $$ $$可见当x = \\frac{p}{2}时，z^{'} = 0,$$ $$当x \\lt \\frac{p}{2}时，z^{'} \\gt 0,递增,$$ $$当x \\gt \\frac{p}{2}时，z^{'} \\lt 0,递减，所以x = \\frac{p}{2}为最大值点。$$ 下面回过头开始证明命题，假设p = $\\frac{1}{n}$,$x_1 = min(p_i) \\lt max(p_i) = x_2$ $$ 则有x_1 \\leq p \\leq x_2\\\\ \\therefore -(plogp + (x_1+x_2-p)log(x_1+x_2-p)) \\geq -(x_1logx_1+x_2logx_2) $$ 因为p与$x_1+x_2-p$关于轴$\\frac{x_1+x_2}{2}$是对称的,它们夹都在$x_1与x_2之间$所以左侧式子大于等于右侧式子 $$ 每一轮都把-\\sum^n_{i=1}{p_ilogp_i}中最大的p_i和最小的p_i对应的两项变为\\\\ -(plogp + (x_1+x_2-p)log(x_1+x_2-p))，即变为最大\\\\ 其中，p = \\frac{x_1+x_2}{2}时熵最大，所以(x_1+x_2-p)log(x_1+x_2-p) = plogp\\\\ 共\\frac{n}{2}对，所以熵的最大值为plogp $$ 设有两个随机变量X,Y,其联合概率分布为 P(X=x_i,Y=y_i) = p_{ij}, i = 1,2,...,n; j = 1,2,...m条件熵H(Y|X)表示在已知随机变量X的条件下随机变量Y的不确定性。定义为X给定条件下Y的条件概率分布的熵对X的数学期望 H(Y|X) = \\sum^n_{i=1}p_iH(Y|X=x_i)定义(信息增益)特征A对训练数据集D的信息增益g(D,A)，定义为集合D的经验熵H(D)与特征A给定条件下D的经验条件熵H(D|A)之差(A与D的互信息),即 g(D,A) = H(D) - H(D|A)决策树学习中的信息增益等价于训练数据集中类与特征的互信息。 信息增益算法&emsp;&emsp;对训练数据集D，计算其每个特征的信息增益，比较它们的大小，选择信息增益最大的特征。输入：训练数据集D和特征A输出：特征A对训练数据集D的信息增益g(D,A)（1）计算数据集D的经验熵H(D) H(D) = -\\sum^K_{k=1}\\frac{|C_k|}{|D|}log_2\\frac{|C_k|}{|D|}其中K表示分类个数,$|C_k|$表示其中一个分类的样本个数（2）计算特征A对数据集D的经验条件熵H(D|A) H(D|A) = \\sum^n_{i=1}\\frac{|D_i|}{|D|}H(D_i) = -\\sum^n_{i=1}\\frac{|D_i|}{|D|}\\sum^K_{k=1}\\frac{|D_{ik}|}{|D_i|}log_2\\frac{|D_{ik}|}{|D_i|}其中特征A有n个不同的取值（3）计算信息增益 g(D,A) = H(D) - H(D|A)代码计算H(D)1234567891011121314#计算熵def calcShannonEnt(dataSet): #calculate Shannon Entropy 计算香农熵 numEntries = len(dataSet) #数据集中样本总数 labelCounts = &#123;&#125; #分类总数 for featVec in dataSet: currentLabel = featVec[-1] #取出数据集中的标签名（分类名） if currentLabel not in labelCounts.keys(): labelCounts[currentLabel] = 0 labelCounts[currentLabel] += 1 shannonEnt = 0.0 for key in labelCounts: prob = float(labelCounts[key])/numEntries shannonEnt -= prob * log(prob,2) return shannonEnt 计算H(D|A)，g(D,A) 12345678910111213141516171819#选择最好的数据集划分方式def chooseBestFeatureToSplit(dataSet): numFeatures = len(dataSet[0]) - 1 #特征个数，减去的是所属类别 baseEntropy = calcShannonEnt(dataSet) #数据集的熵 bestInfoGain = 0.0;bestFeature = -1 #最优信息增益，最优特征 for i in range(numFeatures): #将该特征列的数据取到新列表中，即该特征所有的取值 featList = [example[i] for example in dataSet] uniqueVals = set(featList) newEntropy = 0.0 for value in uniqueVals: #依次处理划分的各个子集 subDataSet = splitDataSet(dataSet,i,value) prob = len(subDataSet)/float(len(dataSet)) newEntropy += prob * calcShannonEnt(subDataSet) #条件熵的计算 infoGain = baseEntropy - newEntropy #信息增益（互信息）的计算 if(infoGain &gt; bestInfoGain): bestInfoGain = infoGain bestFeature = i return bestFeature 信息增益比决策树的生成","categories":[{"name":"人工智能","slug":"人工智能","permalink":"http://yoursite.com/categories/人工智能/"}],"tags":[],"author":"John Doe"},{"title":"网络攻防实践","slug":"网络攻防实践","date":"2019-07-12T07:58:00.000Z","updated":"2019-08-10T05:44:00.255Z","comments":true,"path":"2019/07/12/网络攻防实践/","link":"","permalink":"http://yoursite.com/2019/07/12/网络攻防实践/","excerpt":"OSI体系结构 共分为七个层次：物理层PH，链路层DL，网络层N，运输层T，会话层S，表示层P，应用层A。 TCP/IP模型 常见的应用层协议 概念 IP地址：互联网协议地址，又称网际协议地址，是IP协议提供的一种统一的地址格式，它为互联网的每一个网络，每一台主机提供一个逻辑地址，以此屏蔽物理地址的差异。 子网掩码：指明一个IP地址的哪些位标识的是主机所在的子网，以及哪些位标识是主机的位掩码。子网掩码只有一个作用就是将某个IP地址划分为网络地址和主机地址两部分 网关：在子网中找不到目标时要查询的地址。 DHCP服务器：一个局域网的网络协议，使用UDP协议工作， 两个用途：","text":"OSI体系结构&ensp;&ensp;&ensp;&ensp;共分为七个层次：物理层PH，链路层DL，网络层N，运输层T，会话层S，表示层P，应用层A。 TCP/IP模型 常见的应用层协议概念IP地址：互联网协议地址，又称网际协议地址，是IP协议提供的一种统一的地址格式，它为互联网的每一个网络，每一台主机提供一个逻辑地址，以此屏蔽物理地址的差异。子网掩码：指明一个IP地址的哪些位标识的是主机所在的子网，以及哪些位标识是主机的位掩码。子网掩码只有一个作用就是将某个IP地址划分为网络地址和主机地址两部分网关：在子网中找不到目标时要查询的地址。DHCP服务器：一个局域网的网络协议，使用UDP协议工作，两个用途：(1)用于内部网或网络供应服务商自动分配IP地址。&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;(2)内部网管理员对所有计算机做中央管理的手段。端口：设备与外界通讯交流的出口。可分为虚拟端口和物理端口，虚拟端口指计算机内部或交换机路由器内的端口，不可见。 DNS协议域名系统(DomainNameSystem),每一个域名都对应一个唯一的IP地址，DNS就是进行域名解析的服务器。FTP协议包括FTP服务器，FTP客户端两个组成部分。用户可以使用FIP客户端通过FTP协议访问位于FTP服务器上的资源。FTP传输效率非常高，在网络上传输大文件时也采用该协议。FTP协议默认使用20和21端口，20端口用于传输数据，21端口用于传输控制信息。DHCP协议动态主机设置协议(Dynamic Host Configuration Protocol)是一个局域网的网络协议，使用UDP协议工作，用途同上面的DHCP服务器用途HTTP协议HTTP是一个简单的请求-响应协议，通常运行在TCP之上。它指定了客户端可能发送给服务器什么样的消息以及得到什么样的响应。ICMP协议Internet控制报文协议，用于在IP主机和路由器之间传递控制消息。 渗透测试流程前期交互，情报搜集，威胁建模，漏洞分析，渗透攻击，后渗透攻击，报告。渗透测试分类黑盒测试白盒测试灰盒测试","categories":[],"tags":[],"author":"John Doe"},{"title":"ip地址和URL","slug":"ip地址和URL","date":"2019-07-08T09:27:25.000Z","updated":"2019-08-10T05:44:33.002Z","comments":true,"path":"2019/07/08/ip地址和URL/","link":"","permalink":"http://yoursite.com/2019/07/08/ip地址和URL/","excerpt":"IP地址和URL 通常一个主机（host）只有一个网络接口，即只有一个Internet地址，IP地址。 InetAddress类","text":"IP地址和URL通常一个主机（host）只有一个网络接口，即只有一个Internet地址，IP地址。InetAddress类","categories":[],"tags":[],"author":"John Doe"},{"title":"java输入输出基础","slug":"java输入输出基础","date":"2019-07-08T00:28:06.000Z","updated":"2019-08-10T05:44:39.984Z","comments":true,"path":"2019/07/08/java输入输出基础/","link":"","permalink":"http://yoursite.com/2019/07/08/java输入输出基础/","excerpt":"输入输出基础： 1.java I/O流 四个抽象类(object类的直接子类): byte字节流：InputStream,OutputStream； char(双字节)字符流：Reader,Writer File,Buffered 两个桥梁：InputStreamReader,OutputStreamWriter 例如想按行读取文件，可以将文件字符流包装成缓存字符流来读取。 1 BufferedReader bfr = new BufferedReader(new FileReader(\"test.txt\"));","text":"输入输出基础： 1.java I/O流四个抽象类(object类的直接子类):&ensp;&ensp;byte字节流：InputStream,OutputStream；&ensp;&ensp;char(双字节)字符流：Reader,WriterFile,Buffered两个桥梁：InputStreamReader,OutputStreamWriter 例如想按行读取文件，可以将文件字符流包装成缓存字符流来读取。1BufferedReader bfr = new BufferedReader(new FileReader(&quot;test.txt&quot;));","categories":[],"tags":[],"author":"John Doe"},{"title":"Python","slug":"Python","date":"2019-07-06T00:33:04.000Z","updated":"2019-08-10T05:44:54.613Z","comments":true,"path":"2019/07/06/Python/","link":"","permalink":"http://yoursite.com/2019/07/06/Python/","excerpt":"转义字符 \\ 1 'I\\'m \\\"OK\\\"!' 表示的字符串内容是： 1 I'm \"OK\"! 如果字符串里面有很多字符都需要转义，就需要加很多\\，为了简化，Python还允许用r’’表示’’内部的字符串默认不转义 1 2 >>> print(r'\\\\\\t\\\\') \\\\\\t\\\\ Python允许用’’’…’’’的格式表示多行内容 1 2 3 4 5 6 >>> print('''line1 ... line2 ... line3''') line1 line2 line3 其中…是在交互式命令行代替>>>的，不是代码的一部分，写成程序就是 1 2","text":"转义字符 \\1&apos;I\\&apos;m \\&quot;OK\\&quot;!&apos; 表示的字符串内容是：1I&apos;m &quot;OK&quot;! 如果字符串里面有很多字符都需要转义，就需要加很多\\，为了简化，Python还允许用r’’表示’’内部的字符串默认不转义12&gt;&gt;&gt; print(r&apos;\\\\\\t\\\\&apos;)\\\\\\t\\\\ Python允许用’’’…’’’的格式表示多行内容123456&gt;&gt;&gt; print(&apos;&apos;&apos;line1... line2... line3&apos;&apos;&apos;)line1line2line3 其中…是在交互式命令行代替&gt;&gt;&gt;的，不是代码的一部分，写成程序就是123print(&apos;&apos;&apos;line1line2line3&apos;&apos;&apos;) 在Python中，有两种除法/和//，/的计算结果为浮点数1210 / 33.3333333333333335 而地板除//只取结果的整数部分1210 // 33","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[],"author":"John Doe"},{"title":"遇到的问题","slug":"遇到的问题","date":"2019-07-01T03:11:23.000Z","updated":"2019-07-01T03:20:55.634Z","comments":true,"path":"2019/07/01/遇到的问题/","link":"","permalink":"http://yoursite.com/2019/07/01/遇到的问题/","excerpt":"使用hexo admin插入图片时，直接复制图片，粘贴过来时图片路径是 \\\\images\\pasted-3.png\\应该改为/images/pasted-3.png,上传网络必须用斜杠","text":"&emsp;&emsp;使用hexo admin插入图片时，直接复制图片，粘贴过来时图片路径是\\\\images\\pasted-3.png\\应该改为/images/pasted-3.png,上传网络必须用斜杠","categories":[],"tags":[],"author":"John Doe"},{"title":"计算机组成原理","slug":"计算机组成原理","date":"2019-07-01T01:09:00.000Z","updated":"2019-07-01T03:05:23.954Z","comments":true,"path":"2019/07/01/计算机组成原理/","link":"","permalink":"http://yoursite.com/2019/07/01/计算机组成原理/","excerpt":"公式","text":"公式","categories":[],"tags":[],"author":"John Doe"}]}