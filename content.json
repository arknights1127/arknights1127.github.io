{"meta":{"title":"否定之否定的博客","subtitle":null,"description":null,"author":"John Doe","url":"http://yoursite.com","root":"/"},"pages":[{"title":"分类","date":"2019-07-05T01:48:17.000Z","updated":"2019-07-05T03:24:01.397Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Hello World","slug":"hello-world","date":"2019-08-10T05:45:09.000Z","updated":"2019-08-10T05:45:09.722Z","comments":true,"path":"2019/08/10/hello-world/","link":"","permalink":"http://yoursite.com/2019/08/10/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1 $ hexo new \"My New Post\" More info: Writing Run server 1 $ hexo s","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"算法导论","slug":"算法导论","permalink":"http://yoursite.com/categories/算法导论/"}],"tags":[]},{"title":"逻辑斯谛回归与最大熵模型","slug":"逻辑斯谛回归与最大熵模型","date":"2019-08-10T04:24:11.000Z","updated":"2019-08-10T04:24:17.237Z","comments":true,"path":"2019/08/10/逻辑斯谛回归与最大熵模型/","link":"","permalink":"http://yoursite.com/2019/08/10/逻辑斯谛回归与最大熵模型/","excerpt":"","text":"","categories":[],"tags":[],"author":"John Doe"},{"title":"决策树","slug":"决策树","date":"2019-08-10T02:02:09.000Z","updated":"2019-08-10T05:43:25.296Z","comments":true,"path":"2019/08/10/决策树/","link":"","permalink":"http://yoursite.com/2019/08/10/决策树/","excerpt":"定义(决策树): 分类决策树是一种描述对实例进行分类的树形结构。决策树由结点node，有向边direct edge组成。结点有两种类型，内部结点(表示一个特征和属性)，叶结点(表示一个类)。 决策树与if-then规则： 将决策树转化为if-then规则集合：由决策树的根结点到叶结点的每一条路径构建一条规则：路径的内部结点的特征对应规则的条件，叶结点的类对应规则的结论。 必须满足互斥且完备的条件：每一个实例都被且仅被一条路径(规则)所覆盖。 决策树与条件概率分布： 决策树可以表示给定特征条件下类的条件概率分布，这一条件概率分布定义在特征空间的一个划分上。决策树的一条路径对应划分","text":"定义(决策树):分类决策树是一种描述对实例进行分类的树形结构。决策树由结点node，有向边direct edge组成。结点有两种类型，内部结点(表示一个特征和属性)，叶结点(表示一个类)。 决策树与if-then规则：将决策树转化为if-then规则集合：由决策树的根结点到叶结点的每一条路径构建一条规则：路径的内部结点的特征对应规则的条件，叶结点的类对应规则的结论。必须满足互斥且完备的条件：每一个实例都被且仅被一条路径(规则)所覆盖。 决策树与条件概率分布：决策树可以表示给定特征条件下类的条件概率分布，这一条件概率分布定义在特征空间的一个划分上。决策树的一条路径对应划分中的一个单元。决策树所表示的条件概率分布由各个单元给定条件下类的条件概率分布组成。 如图，假设只有两个类(正类和负类)，图(b)为各个单元给定条件下的条件概率分布，其中当某个单元c的条件概率分布满足P(Y=+1|X=c) &gt; 0.5时，就认为该单元属于正类（各个单元的条件概率分布都不相同），如$a_1 \\leq x^{(1)} \\leq 1,0 \\leq x^{(2)} \\leq a_3$时，条件概率小于0.5，所以属于负类","categories":[],"tags":[],"author":"John Doe"},{"title":"网络攻防实践","slug":"网络攻防实践","date":"2019-07-12T07:58:00.000Z","updated":"2019-08-10T05:44:00.255Z","comments":true,"path":"2019/07/12/网络攻防实践/","link":"","permalink":"http://yoursite.com/2019/07/12/网络攻防实践/","excerpt":"OSI体系结构 共分为七个层次：物理层PH，链路层DL，网络层N，运输层T，会话层S，表示层P，应用层A。 TCP/IP模型 常见的应用层协议 概念 IP地址：互联网协议地址，又称网际协议地址，是IP协议提供的一种统一的地址格式，它为互联网的每一个网络，每一台主机提供一个逻辑地址，以此屏蔽物理地址的差异。 子网掩码：指明一个IP地址的哪些位标识的是主机所在的子网，以及哪些位标识是主机的位掩码。子网掩码只有一个作用就是将某个IP地址划分为网络地址和主机地址两部分 网关：在子网中找不到目标时要查询的地址。 DHCP服务器：一个局域网的网络协议，使用UDP协议工作， 两个用途：","text":"OSI体系结构&ensp;&ensp;&ensp;&ensp;共分为七个层次：物理层PH，链路层DL，网络层N，运输层T，会话层S，表示层P，应用层A。 TCP/IP模型 常见的应用层协议概念IP地址：互联网协议地址，又称网际协议地址，是IP协议提供的一种统一的地址格式，它为互联网的每一个网络，每一台主机提供一个逻辑地址，以此屏蔽物理地址的差异。子网掩码：指明一个IP地址的哪些位标识的是主机所在的子网，以及哪些位标识是主机的位掩码。子网掩码只有一个作用就是将某个IP地址划分为网络地址和主机地址两部分网关：在子网中找不到目标时要查询的地址。DHCP服务器：一个局域网的网络协议，使用UDP协议工作，两个用途：(1)用于内部网或网络供应服务商自动分配IP地址。&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;(2)内部网管理员对所有计算机做中央管理的手段。端口：设备与外界通讯交流的出口。可分为虚拟端口和物理端口，虚拟端口指计算机内部或交换机路由器内的端口，不可见。 DNS协议域名系统(DomainNameSystem),每一个域名都对应一个唯一的IP地址，DNS就是进行域名解析的服务器。FTP协议包括FTP服务器，FTP客户端两个组成部分。用户可以使用FIP客户端通过FTP协议访问位于FTP服务器上的资源。FTP传输效率非常高，在网络上传输大文件时也采用该协议。FTP协议默认使用20和21端口，20端口用于传输数据，21端口用于传输控制信息。DHCP协议动态主机设置协议(Dynamic Host Configuration Protocol)是一个局域网的网络协议，使用UDP协议工作，用途同上面的DHCP服务器用途HTTP协议HTTP是一个简单的请求-响应协议，通常运行在TCP之上。它指定了客户端可能发送给服务器什么样的消息以及得到什么样的响应。ICMP协议Internet控制报文协议，用于在IP主机和路由器之间传递控制消息。 渗透测试流程前期交互，情报搜集，威胁建模，漏洞分析，渗透攻击，后渗透攻击，报告。渗透测试分类黑盒测试白盒测试灰盒测试","categories":[],"tags":[],"author":"John Doe"},{"title":"ip地址和URL","slug":"ip地址和URL","date":"2019-07-08T09:27:25.000Z","updated":"2019-08-10T05:44:33.002Z","comments":true,"path":"2019/07/08/ip地址和URL/","link":"","permalink":"http://yoursite.com/2019/07/08/ip地址和URL/","excerpt":"IP地址和URL 通常一个主机（host）只有一个网络接口，即只有一个Internet地址，IP地址。 InetAddress类","text":"IP地址和URL通常一个主机（host）只有一个网络接口，即只有一个Internet地址，IP地址。InetAddress类","categories":[],"tags":[],"author":"John Doe"},{"title":"java输入输出基础","slug":"java输入输出基础","date":"2019-07-08T00:28:06.000Z","updated":"2019-08-10T05:44:39.984Z","comments":true,"path":"2019/07/08/java输入输出基础/","link":"","permalink":"http://yoursite.com/2019/07/08/java输入输出基础/","excerpt":"输入输出基础： 1.java I/O流 四个抽象类(object类的直接子类): byte字节流：InputStream,OutputStream； char(双字节)字符流：Reader,Writer File,Buffered 两个桥梁：InputStreamReader,OutputStreamWriter 例如想按行读取文件，可以将文件字符流包装成缓存字符流来读取。 1 BufferedReader bfr = new BufferedReader(new FileReader(\"test.txt\"));","text":"输入输出基础： 1.java I/O流四个抽象类(object类的直接子类):&ensp;&ensp;byte字节流：InputStream,OutputStream；&ensp;&ensp;char(双字节)字符流：Reader,WriterFile,Buffered两个桥梁：InputStreamReader,OutputStreamWriter 例如想按行读取文件，可以将文件字符流包装成缓存字符流来读取。1BufferedReader bfr = new BufferedReader(new FileReader(&quot;test.txt&quot;));","categories":[],"tags":[],"author":"John Doe"},{"title":"Python","slug":"Python","date":"2019-07-06T00:33:04.000Z","updated":"2019-08-10T05:44:54.613Z","comments":true,"path":"2019/07/06/Python/","link":"","permalink":"http://yoursite.com/2019/07/06/Python/","excerpt":"转义字符 \\ 1 'I\\'m \\\"OK\\\"!' 表示的字符串内容是： 1 I'm \"OK\"! 如果字符串里面有很多字符都需要转义，就需要加很多\\，为了简化，Python还允许用r’’表示’’内部的字符串默认不转义 1 2 >>> print(r'\\\\\\t\\\\') \\\\\\t\\\\ Python允许用’’’…’’’的格式表示多行内容 1 2 3 4 5 6 >>> print('''line1 ... line2 ... line3''') line1 line2 line3 其中…是在交互式命令行代替>>>的，不是代码的一部分，写成程序就是 1 2","text":"转义字符 \\1&apos;I\\&apos;m \\&quot;OK\\&quot;!&apos; 表示的字符串内容是：1I&apos;m &quot;OK&quot;! 如果字符串里面有很多字符都需要转义，就需要加很多\\，为了简化，Python还允许用r’’表示’’内部的字符串默认不转义12&gt;&gt;&gt; print(r&apos;\\\\\\t\\\\&apos;)\\\\\\t\\\\ Python允许用’’’…’’’的格式表示多行内容123456&gt;&gt;&gt; print(&apos;&apos;&apos;line1... line2... line3&apos;&apos;&apos;)line1line2line3 其中…是在交互式命令行代替&gt;&gt;&gt;的，不是代码的一部分，写成程序就是123print(&apos;&apos;&apos;line1line2line3&apos;&apos;&apos;) 在Python中，有两种除法/和//，/的计算结果为浮点数1210 / 33.3333333333333335 而地板除//只取结果的整数部分1210 // 33","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[],"author":"John Doe"},{"title":"遇到的问题","slug":"遇到的问题","date":"2019-07-01T03:11:23.000Z","updated":"2019-07-01T03:20:55.634Z","comments":true,"path":"2019/07/01/遇到的问题/","link":"","permalink":"http://yoursite.com/2019/07/01/遇到的问题/","excerpt":"","text":"&emsp;&emsp;使用hexo admin插入图片时，直接复制图片，粘贴过来时图片路径是\\\\images\\pasted-3.png\\应该改为/images/pasted-3.png,上传网络必须用斜杠","categories":[],"tags":[],"author":"John Doe"},{"title":"计算机组成原理","slug":"计算机组成原理","date":"2019-07-01T01:09:00.000Z","updated":"2019-07-01T03:05:23.954Z","comments":true,"path":"2019/07/01/计算机组成原理/","link":"","permalink":"http://yoursite.com/2019/07/01/计算机组成原理/","excerpt":"","text":"公式","categories":[],"tags":[],"author":"John Doe"}]}